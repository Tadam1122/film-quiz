import express from 'express'
import fs from 'fs'
import https from 'https'
import { registerRoutes } from './routes'
import bodyParser from 'body-parser'
import cors from 'cors'

const app = express()

console.log(__dirname)

const credentials = {
  key: fs.readFileSync('../certs/localhost-key.pem', 'utf-8'),
  cert: fs.readFileSync('../certs/localhost.pem', 'utf-8'),
}

app.use(cors())
app.use(bodyParser.json())

app.use(
  express.urlencoded({
    extended: true,
  })
)

registerRoutes(app)

const httpsServer = https.createServer(credentials, app)

const io = require('socket.io')(httpsServer)

io.on('connection', function (socket) {
  socket.emit('message', 'new connection')
})

httpsServer.listen('8000', () => {
  console.log('app listening on port 8000')
})




disconnect code to remove disconnected user from room (possible scope creep)

  socket.on('disconnect', () => {
    console.log(socket.id)
    let usernames = []
    let found = false
    console.log('user disconnected')
    for (let j = 0; j < rooms.length; j++) {
      //search each room for user
      for (let i = 0; i < rooms[j].users.length; i++) {
        //remove disconnected user from room
        if (rooms[j].users[i].id === socket.id) {
          found = true
          console.log(`user ${rooms[j].users[i].username} removed`)
          rooms[j].users.splice(i, 1)
          //update current users
        } else {
          usernames.push(rooms[j].users[i].username)
        }
      }
      //reset usernames and search again
      if (!found) {
        usernames = []
      }
      //disconnected user already found, push updated usernames
      else {
        io.sockets.to(rooms[j].pin).emit('setUsers', { usernames: usernames })
        break
      }
    }
  })